import { Command } from 'commander';
import inquirer from 'inquirer';
import apiRequest from '../util/apiRequest.js';
import type { createTeamEndpoint, getTeamEndpoint } from '@mm28/shared/types/api/teamsApiTypes.js';
import chalk from 'chalk';
import { credentials, deleteCredentials, loggedIn, setCredentials } from '../util/auth.js';
import { notLoggedInErr } from '../util/messages.js';

const teamQuestion = {
	type: 'input',
	name: 'name',
	message: 'What is the name of your team (case-sensitive)?',
	validate(input: string){
		if(input.length > 20) return 'Team name too long. (20 char max)';
		if(input.length == 0) return 'Team name can\'t be empty.';
		const validNameRegex = /^[a-zA-Z0-9]([a-zA-Z0-9 _-]{0,18}[a-zA-Z0-9])?$/; // from mm27
		if(!validNameRegex.test(input)){
			return 'Team name must only contain alphanumeric characters, underscores, dashes, and spaces.\n' +
			'The team name can only begin or end with either a letter or a number.';
		}
		return true;
	}
};

function warnLoggedIn(msg: string){
	console.log(chalk.yellow(`You are currently logged in as team ${chalk.bold(credentials.name)}.`));
	console.log(chalk.yellow(msg));
}

const loginCommand = new Command('login')
	.description('log in to your team')
	.option('--force', 'force new login even if already logged in')
	.action(async ({force}) => {
		if(loggedIn() && (!force)) {
			return warnLoggedIn('Please log out using "mm28 logout" to log in as a different team.');
		}
		const answers = await inquirer.prompt<{name: string, password: string}>([
			teamQuestion,
			{
				type: 'password',
				mask: '*',
				name: 'password',
				message: 'Enter the password your team got when registering:'
			}
		]);
		const response = await apiRequest<getTeamEndpoint>('GET', `/teams/${answers.name}` as '/teams/:team', undefined, answers);
		setCredentials(response.body);
		console.log(chalk.green('Successfully logged in!'));
		return;
	});

const registerCommand = new Command('register')
	.description('register a new team')
	.option('--force', 'force register even if already logged in')
	.action(async ({force}) => {
		if(loggedIn() && (!force)) {
			return warnLoggedIn('Please log out using "mm28 logout" to register a new team.');
		}

		const answers = await inquirer.prompt<{name: string, email: string}>([
			teamQuestion,
			{
				type: 'input',
				name: 'email',
				message: 'What is your team\'s email? (For prize/recovery purposes)',
				validate(input: string){
					const emailregex = /^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$/; // any email should work?
					if(!emailregex.test(input)) return 'Enter a ".edu" email.';
					return true;
				}
			}
		]);
		
		const response = await apiRequest<createTeamEndpoint>('PUT', `/teams/${answers.name}` as '/teams/:team', {
			email: answers.email
		});

		setCredentials({
			name: answers.name,
			password: response.body.password
		});

		console.log(chalk.green('Registered team ' + chalk.bold(answers.name) + ' with password ' + chalk.underline(response.body.password)));
		console.log(chalk.bold.yellow('Write down this password! Give it to your teammates so they can log in as well.'));
	});

const whoamiCommand = new Command('whoami')
	.description('print current team')
	.action(()=>{
		if(loggedIn()) console.log(chalk.green(`Logged in as team ${chalk.bold(credentials.name)}.`));
		else console.log('Not currently logged in. Run mm28 login to log in.');
	});

const logoutCommand = new Command('logout')
	.description('log out')
	.action(() => {
		if(loggedIn()) {
			deleteCredentials();
			console.log(chalk.green('Logged out successfully!'));
		}
		else notLoggedInErr();
	});

const teamCommands = [loginCommand, logoutCommand, whoamiCommand, registerCommand];
export default teamCommands;